#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5
#define MAX_LEN 100

void createKeyMatrix(char key[], char keyMatrix[SIZE][SIZE]);
void processText(char text[], char keyMatrix[SIZE][SIZE], int encrypt);
void findPosition(char keyMatrix[SIZE][SIZE], char c, int *row, int *col);
void formatText(char text[]);

int main() {
    char key[MAX_LEN], text[MAX_LEN];
    char keyMatrix[SIZE][SIZE];
    char choice;

    printf("Enter the key: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0';

    printf("Enter the text: ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = '\0';

    printf("Encrypt or Decrypt (E/D): ");
    scanf(" %c", &choice);

    createKeyMatrix(key, keyMatrix);
    formatText(text);

    if (toupper(choice) == 'E') {
        processText(text, keyMatrix, 1);
    } else if (toupper(choice) == 'D') {
        processText(text, keyMatrix, 0);
    } else {
        printf("Invalid choice.\n");
    }

    return 0;
}

void createKeyMatrix(char key[], char keyMatrix[SIZE][SIZE]) {
    int used[26] = {0};
    int row = 0, col = 0;

    for (int i = 0; key[i] != '\0'; i++) {
        char c = toupper(key[i]);
        if (c == 'J') c = 'I';
        if (isalpha(c) && !used[c - 'A']) {
            keyMatrix[row][col++] = c;
            used[c - 'A'] = 1;
            if (col == SIZE) {
                col = 0;
                row++;
            }
        }
    }

    for (char c = 'A'; c <= 'Z'; c++) {
        if (c == 'J') continue;
        if (!used[c - 'A']) {
            keyMatrix[row][col++] = c;
            used[c - 'A'] = 1;
            if (col == SIZE) {
                col = 0;
                row++;
            }
        }
    }
}

void processText(char text[], char keyMatrix[SIZE][SIZE], int encrypt) {
    for (int i = 0; text[i] != '\0' && text[i+1] != '\0'; i += 2) {
        char a = toupper(text[i]);
        char b = toupper(text[i+1]);
        int row1, col1, row2, col2;

        findPosition(keyMatrix, a, &row1, &col1);
        findPosition(keyMatrix, b, &row2, &col2);

        if (row1 == row2) {
            text[i] = keyMatrix[row1][(col1 + (encrypt ? 1 : -1) + SIZE) % SIZE];
            text[i+1] = keyMatrix[row2][(col2 + (encrypt ? 1 : -1) + SIZE) % SIZE];
        } else if (col1 == col2) {
            text[i] = keyMatrix[(row1 + (encrypt ? 1 : -1) + SIZE) % SIZE][col1];
            text[i+1] = keyMatrix[(row2 + (encrypt ? 1 : -1) + SIZE) % SIZE][col2];
        } else {
            text[i] = keyMatrix[row1][col2];
            text[i+1] = keyMatrix[row2][col1];
        }
    }
    printf("%s text: %s\n", encrypt ? "Encrypted" : "Decrypted", text);
}

void findPosition(char keyMatrix[SIZE][SIZE], char c, int *row, int *col) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (keyMatrix[i][j] == c) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

void formatText(char text[]) {
    int len = strlen(text);
    for (int i = 0; i < len; i++) {
        if (!isalpha(text[i])) {
            memmove(&text[i], &text[i + 1], len - i);
            len--;
            i--;
        }
    }

    for (int i = 0; i < len - 1; i += 2) {
        if (toupper(text[i]) == toupper(text[i + 1])) {
            memmove(&text[i + 2], &text[i + 1], len - i);
            text[i + 1] = 'X';
            len++;
        }
    }

    if (len % 2 != 0) {
        text[len] = 'X';
        text[len + 1] = '\0';
    }
}
