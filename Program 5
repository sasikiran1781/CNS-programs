#include <stdio.h>
#include <ctype.h>

int modInverse(int a, int m);
int isValidA(int a);
void encrypt(char plaintext[], int a, int b);
void decrypt(char ciphertext[], int a, int b);

int main() {
    char text[1000];
    int a, b;
    char choice;

    printf("Enter the text: ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = '\0';

    printf("Enter the value of a (must be coprime with 26): ");
    scanf("%d", &a);
    printf("Enter the value of b: ");
    scanf("%d", &b);

    if (!isValidA(a)) {
        printf("Invalid value of a. It must be coprime with 26.\n");
        return 1;
    }

    printf("Encrypt or Decrypt (E/D): ");
    scanf(" %c", &choice);

    if (toupper(choice) == 'E') {
        encrypt(text, a, b);
    } else if (toupper(choice) == 'D') {
        decrypt(text, a, b);
    } else {
        printf("Invalid choice.\n");
    }

    return 0;
}

int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 0) {
            return -1;
        }
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;
}

int isValidA(int a) {
    return modInverse(a, 26) != -1;
}

void encrypt(char plaintext[], int a, int b) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            char base = isupper(plaintext[i]) ? 'A' : 'a';
            plaintext[i] = ((a * (plaintext[i] - base) + b) % 26) + base;
        }
    }
    printf("Encrypted text: %s\n", plaintext);
}

void decrypt(char ciphertext[], int a, int b) {
    int a_inv = modInverse(a, 26);
    if (a_inv == -1) {
        printf("Invalid value of a. It has no modular inverse under 26.\n");
        return;
    }
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            ciphertext[i] = (a_inv * (ciphertext[i] - base - b + 26) % 26 + 26) % 26 + base;
        }
    }
    printf("Decrypted text: %s\n", ciphertext);
}
